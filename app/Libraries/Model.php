<?php class Model { private $db; public function __construct() { $this->db = new Database; } public function read($type, $table, $_cols = [], $_where = [], $_order, $_limit) { $cols = ''; foreach($_cols as $col) { if (isset($col[2])) { if (is_null($col[0])) { $cols .= $col[1] . ' AS ' . $col[2] . ', '; } else { $cols .= $col[0] . '.' . $col[1] . ' AS ' . $col[2] . ', '; } } else { $cols .= $col[0] . '.' . $col[1] . ', '; } } $fields = rtrim($cols, ', '); if ($table) { $from = ' FROM ' . $table . ' t1 '; } if ($_where) { $where = ' WHERE '; foreach($_where as $value) { if (isset($value[3])) { $marker = ':' . $value[1]; $where .= $value[0] . '.' . $value[1] . ' = ' . $marker . $value[3]; } else { $marker = ':' . $value[1]; $where .= $value[0] . '.' . $value[1] . ' = ' . $marker; } } } else { $where = null; } if ($_order) { $order = ' ORDER BY ' . $_order; } else { $order = null; } if ($_limit) { $limit = ' LIMIT ' . $_limit; } else { $limit = null; } $stmt = 'SELECT ' . $fields . $from . $where . $order . $limit; $this->db->query($stmt); if ($_where) { foreach($_where as $value) { $marker = ':' . $value[1]; $this->db->bind($marker, $value[2]); } } $result = ''; if ( $type == 'single') { $result = $this->db->getSingle(); } else if ( $type == 'set') { $result = $this->db->getSet(); } return $result; } public function readJoin($type, $_from = [], $_joins = [], $_cols = [], $_where = [], $_group = [], $_order = [], $_limit = []) { if ($_from) { $from = ' FROM ' . $_from[0] . ' ' . $_from[1];; } if ($_joins) { $joins = ''; foreach($_joins as $tab) { $joins .= ' INNER JOIN ' . $tab[0] . ' ' . $tab[1] . ' ON ' . $tab[1] . '.' . $tab[2] . ' = ' . $tab[3] . '.' . $tab[4]; } } else { $joins = null; } $cols = ''; foreach($_cols as $col) { if (isset($col[2])) { if (is_null($col[0])) { $cols .= $col[1] . ' AS ' . $col[2] . ', '; } else { $cols .= $col[0] . '.' . $col[1] . ' AS ' . $col[2] . ', '; } } else { $cols .= $col[0] . '.' . $col[1] . ', '; } } $fields = rtrim($cols, ', '); if ($_where) { $where = ' WHERE '; foreach($_where as $value) { if (isset($value[3])) { if ( $value[2] == 'IN' ) { $where .= $value[0] . '.' . $value[1] . ' IN ' . $value[3]; } else if ( $value[3] == ' AND ' ) { $marker = ':' . $value[1]; $where .= $value[0]. '.' . $value[1] . ' = ' . $marker . $value[3]; } else if ( is_null($value[0]) ) { $marker = ':' . $value[1]; $where .= $value[2] . ' = ' . $marker; } } else { $marker = ':' . $value[1]; $where .= $value[0] . '.' . $value[1] . ' = ' . $marker; } } } else { $where = null; } if ($_group) { $group = ' GROUP BY ' . $_group[0] . '.' . $_group[1]; } else { $group = null; } if ($_order) { if ( $_order[1] && $_order[2] ) { $order = ' ORDER BY ' . $_order[1] . '.' . $_order[2] . ' ' . $_order[0]; } else { $order = ' ' . $_order[0]; } } else { $order = null; } if ($_limit) { if ( $_limit[1] && $_limit[2] ) { $limit = ' LIMIT ' . $_limit[0] . ' '. $_limit[2] . ' ' . $_limit[1]; } else if ( $_limit[1] ) { $limit = ' LIMIT ' . $_limit[0] . ', ' . $_limit[1]; } else { $limit = ' LIMIT ' . $_limit[0]; } } else { $limit = null; } $stmt = 'SELECT ' . $fields . $from . $joins . $where . $group . $order . $limit; $this->db->query($stmt); if ($_where) { foreach($_where as $value) { if ( $value[0] && $value[2] != 'IN' ) { $marker = ':' . $value[1]; $this->db->bind($marker, $value[2]); } else if ( is_null($value[0]) && $value[2] != 'IN' ) { $marker = ':' . $value[1]; $this->db->bind($marker, $value[3]); } } } if ( $type == 'single') { $result = $this->db->getSingle(); } else if ( $type == 'set') { $result = $this->db->getSet(); } return $result; } public function create($table, $_cols = []) { $fields = ''; foreach($_cols as $col) { $fields .= $col[0] . ', '; } $columns = ' (' . rtrim($fields, ', ') . ')'; $val = ''; foreach($_cols as $col) { $val .= ':' . $col[0] . ', '; } $values = ' VALUES (' . rtrim($val, ', ') . ')'; $stmt = 'INSERT INTO ' . $table . $columns . $values; $this->db->query($stmt); foreach($_cols as $col) { $marker = ':' . $col[0]; $this->db->bind($marker, $col[1]); } if($this->db->execute()) { return $this->db->lastInsertId(); } else { return false; } } public function update($table, $_cols = [], $_col, $_where) { $set = ' SET '; foreach($_cols as $col) { $set .= $col[0] . ' = :' . $col[0] . ', '; } $set_total = rtrim($set, ', '); if ($_where && $_col) { $where = ' WHERE ' . $_col . ' = :_where'; } $stmt = 'UPDATE ' . $table . $set_total . $where; $this->db->query($stmt); foreach($_cols as $col) { $marker = ':' . $col[0]; $this->db->bind($marker, $col[1]); } if ( !is_null($where) ) { $this->db->bind(':_where', $_where); } if ($this->db->execute()) { return $this->db->rowCount(); } else { return false; } } public function delete($table, $_col, $_value) { $stmt = 'DELETE FROM ' . $table . ' WHERE ' . $_col . ' = :_value'; $this->db->query($stmt); $this->db->bind(':_value', $_value); if ($this->db->execute()) { return $this->db->rowCount(); } else { return false; } } public function version() {	$this->db->query('SELECT version() AS server_version'); $this->db->execute(); return $this->db->getSingle()->server_version; } } ?>